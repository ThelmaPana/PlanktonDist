---
title: "Investigate distances between organisms within taxonomic groups."
author: "Thelma Pana√Øotis"
format: 
  html:
    toc: true
    embed-resources: true
editor: visual
lightbox: true
execute:
  warning: false
  cache: true
  freeze: false
---

```{r set_up}
#| echo: false
#| cache: false
source("utils.R")
```

```{r read}
## Taxon of interest
my_taxon <- "Acantharea"
#my_taxon <- "Doliolida"

## All data
images <- read_parquet(here("data/00.images_clean.parquet"))
plankton <- read_parquet(here("data/00.plankton_clean.parquet"))

## Subsample
images <- images %>% slice_sample(n = 10000)
plankton <- plankton %>% filter(img_name %in% images$img_name)

# list img names
img_names <- sort(unique(images$img_name))

# list taxa
taxa <- plankton %>% pull(taxon) %>% unique() %>% sort()

## Null hypothesis data
load(here("data/01.null_data.Rdata"))
```

Define window size for point pattern analysis.

```{r vol_size}
# image volume in pixels
vol <- c()
vol$x <- 10240
vol$y <- 2048
vol$z <- 9572
```

## Distances between all organisms of a given taxon

Get objects and images of the given taxon.

```{r}


# Keep organisms of given taxa, only in images with > 1 organism
t_plankton <- plankton %>% 
  filter(taxon == my_taxon) %>% 
  add_count(img_name) %>% 
  filter(n > 1) %>% 
  select(-n)

img_names <- t_plankton %>% pull(img_name) %>% unique()

t_plankton_img <- images %>% filter(img_name %in% img_names)

#counts <- plankton %>% 
#  group_by(img_name) %>% 
#  summarise(n = sum(taxon == my_taxon)) %>% 
#  ungroup()



```

```{r app}
# Loop over images and compute distances between all points within each image
dist_all <- compute_all_dist(t_plankton, n_cores = n_cores)

# Plot all
ggplot(dist_all) + 
  geom_density(aes(x = dist))

```

Compare with null data

```{r plot_ecdf}
df_dist <- bind_rows(
  dist_all %>% select(dist) %>% mutate(data = my_taxon),
  dist_all_rand %>% select(dist) %>% mutate(data = "null") %>% slice_sample(n = nrow(dist_all)))

df_dist %>% 
  #slice_sample(n = 10000) %>% 
  ggplot(aes(dist, colour = data)) +
  stat_ecdf(geom = "step") 
```

```{r}
s1 <-  sample(df_dist %>% filter(data == my_taxon) %>% pull(dist))
s2 <-  sample(df_dist %>% filter(data == "null") %>% pull(dist))
out <-  kuiper_test(s1, s2)
out
summary(out)
plot(out)
```

::: {.callout-important icon="false"}
TODO: generate null data
:::

```{r}
counts <- t_plankton %>% count(img_name) 

ggplot(counts) + geom_histogram(aes(x = n))
```

```{r}
# Fit a lognormal law
fit_params <- fitdistr(counts$n,"lognormal")

# Sample the law
n_img <-  nrow(counts)
sample <- tibble(
  n = rlnorm(n_img, fit_params$estimate['meanlog'], fit_params$estimate['sdlog'])
  ) %>% 
  mutate(n = round(n)) # round number of objects

# Plot samples from fitted law VS data, focusing on relatively low values
ggplot() + 
  geom_histogram(data = counts, aes(x = n)) +
  geom_histogram(data = sample, aes(x = n), colour = "red") 

```

## Quadrat test

```{r}
# 1 image = 5 square frames
# we can do 10 quadrats in x and 2 in y: square quadraits, 20 per image
nx <- 10 # quadrats in x dimension
ny <- 2  # quadrats in y dimension

# p-value threshold for randomness
thres <- 0.01

# Loop over images and perform the quadrat test in each one
qt_all <- mclapply(img_names, function(name) {
  # Get points within image
  points <- t_plankton %>% 
    filter(img_name == name) %>% 
    select(x, y)
  
  # Convert to ppp
  points_ppp <- ppp(points$x, points$y, window = owin(xrange = c(1, vol$x), yrange = c(1, vol$y)))
  
  # Perform quadrat test and extract p-value
  qt <- quadrat.test(points_ppp, nx = nx, ny = ny, method = "MonteCarlo")
  
  # Store results in a tibble and return it
  tibble(img_name = name, n_obj = nrow(points), p_value = qt$p.value)
}, mc.cores = n_cores)

# Transform list to one tibble
df_qt <- do.call(bind_rows, qt_all) %>% 
  # distribution is random if p_value > thres
  mutate(random = ifelse(p_value < thres, FALSE, TRUE))
summary(df_qt)
```

```{r}
ggplot(df_qt) + geom_histogram(aes(x = p_value), bins = 100)
```

```{r}
ggplot(df_qt) + geom_density_2d(aes(x = n_obj, y = p_value))
```
