---
title: "Generate random data for our null hypothesis"
author: "Thelma Panaïotis"
format: 
  html:
    toc: true
    embed-resources: true
editor: visual
lightbox: true
execute:
  warning: false
  cache: true
  freeze: false
---

```{r set_up}
#| echo: false
#| cache: false
source("utils.R")
```

```{r read}
#| cache.lazy: false

## Subsampling
if (sub_sample){
  load("data/00.subsample.Rdata")
  images <- images_sub
  plankton <- plankton_sub
} else {
  ## All data
  images <- read_parquet("data/00.images_clean.parquet")
  plankton <- read_parquet("data/00.plankton_clean.parquet")
}

# list img names
img_names <- sort(unique(images$img_name))

```

Define window size for point pattern analysis.

```{r vol_size}
# image volume in pixels
vol <- c()
vol$x <- 10240
vol$y <- 2048
vol$z <- 9572
```

**Null hypothesis: plankton is randomly distributed**. This hypothesis can easily be generated by generating a set of images in which we draw random points. Regarding the number of points to draw within each image, we can have a look at the number of objects per image, fit a law, and sample this law.

## Number of objects per image

```{r count_obj}
# Number of objects per image
counts <- plankton %>% count(img_name)
ggplot(counts) + geom_histogram(aes(x = n), bins = 100)
```

Let’s generate `r n_img` images with a similar distribution of number of objects per image.

```{r n_pts}
n_pts <- counts %>% slice_sample(n = n_img, replace = TRUE) %>% pull(n)
```

## Distances between random objects

Generate our random data.

```{r pick_rand}
# Pick random points within image volumes
rand_points <- mclapply(1:n_img, function(i){
  # Number of points to sample within image
  n <- n_pts[i]
  # Draw points
  d_points <- tibble(
    x = runif(n = n, min = 1, max = vol$x),
    y = runif(n = n, min = 1, max = vol$y),
    z = runif(n = n, min = 1, max = vol$z)
  ) %>% # Add information for img name
  mutate(img_name = paste0("img_", str_pad(i, nchar(n_img), pad = "0")))
}, mc.cores = n_cores)

# Store this in a df
rand_points <- do.call(bind_rows, rand_points)

```

Compute and plot distances between all objects within each image.

```{r rand_dist}
# Loop over images and compute distances between all points within each image
dist_all_rand <- compute_all_dist(rand_points, n_cores = n_cores)

# Plot all
ggplot(dist_all_rand) + 
  geom_density(aes(x = dist)) +
  labs(title = "Density distribution of distances for a random distribution")

# Save it
save(dist_all_rand, rand_points, file = "data/01.null_data.Rdata")
```
