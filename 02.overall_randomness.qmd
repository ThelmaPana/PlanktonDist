---
title: "Test for overall randomness of plankton distribution"
author: "Thelma Panaïotis"
format: 
  html:
    toc: true
    embed-resources: true
editor: visual
lightbox: true
execute:
  warning: false
  cache: true
  freeze: false
---

```{r set_up}
#| echo: false
#| cache: false
source("utils.R")
```

::: {.callout-warning icon="false"}
Work with a subsample of the data: `r format(n_img, big.mark = ",")` images.
:::

```{r read}
#| cache.lazy: false

## Subsampling
if (sub_sample){
  load("data/00.subsample.Rdata")
  images <- images_sub
  plankton <- plankton_sub
} else {
  ## All data
  images <- read_parquet("data/00.images_clean.parquet")
  plankton <- read_parquet("data/00.plankton_clean.parquet")
}

# list img names
img_names <- sort(unique(images$img_name))

## Null hypothesis data
load(here("data/01.null_data.Rdata"))
```

Define window size for point pattern analysis.

```{r vol_size}
# image volume in pixels
vol <- c()
vol$x <- 10240
vol$y <- 2048
vol$z <- 9572
```

## Distances between all organisms

To investigate overall randomness, let’s compute distances between all pairs of organisms within an image.

```{r all_dist}
#| warning: false
# Loop over images and compute distances between all points within each image
dist_all <- compute_all_dist(plankton, n_cores = n_cores)

# Plot all
#ggplot(dist_all) + 
#  geom_density(aes(x = dist, group = img_name), alpha = 0.1, linewidth = 0.02, colour = "dodgerblue") +
#  geom_density(aes(x = dist))

ggplot(dist_all) + 
  geom_density(aes(x = dist))
```

## Compare with null data using Kuiper test

Plot ECDF for null distances and all data. Subsample to 10000 points for computations.

::: {.callout-warning icon="false"}
Subsample to `r format(n_dist, big.mark = ",")` distances for computation.
:::

```{r plot_ecdf}
df_dist <- bind_rows(
  dist_all %>% select(dist) %>% mutate(data = "all") %>% slice_sample(n = n_dist),
  dist_all_rand %>% select(dist) %>% mutate(data = "null") %>% slice_sample(n = n_dist)
)
  

df_dist %>%   
  ggplot(aes(dist, colour = data)) +
  stat_ecdf(geom = "step")
```

This looks very similar…

Perform Kuiper test on a subsample

```{r compare}
s1 <-  df_dist %>% filter(data == "all") %>% pull(dist)
s2 <-  df_dist %>% filter(data == "null") %>% pull(dist)
out <-  kuiper_test(s1, s2)
out
summary(out)
plot(out)
```

… and indeed it is similar!

Save the results

```{r save}
# Store into two tables
# one small summary
df_all <- tibble(
  taxon = "all",
  n_obj = nrow(plankton),
  n_img = nrow(images),
  test_stat = out[1],
  p_value = out[2]
)

# one big with distances
df_all_dist <- tibble(
  taxon = "all",
  dist = df_dist %>% filter(data != "null") %>% pull(dist),
  dist_rand = df_dist %>% filter(data == "null") %>% pull(dist)
)

# Save
save(df_all, df_all_dist, file = "data/02.all_distances.Rdata")


```

::: {.callout-note icon="false"}
## Conclusion

**Distances between planktonic organisms at the local scale do not differ from the distances that could be expected if plankton was randomly distributed.**
:::

This is quite unexpected, let’s perform an additional test to confirm (or infirm) this.

## Complete spatial randomness test based on quadrats

Let’s perform a test of complete spatial randomness (CSR) based on quadrat counts for each image.

```{r quadrats_test}
# 1 image = 5 square frames
# we can do 10 quadrats in x and 2 in y: square quadraits, 20 per image
nx <- 10 # quadrats in x dimension
ny <- 2  # quadrats in y dimension

# p-value threshold for randomness
thres <- 0.01

# Loop over images and perform the quadrat test in each one
qt_all <- mclapply(img_names, function(name) {
  # Get points within image
  points <- plankton %>% 
    filter(img_name == name) %>% 
    select(x, y)
  
  # Convert to ppp
  points_ppp <- ppp(points$x, points$y, window = owin(xrange = c(1, vol$x), yrange = c(1, vol$y)))
  
  # Perform quadrat test and extract p-value
  qt <- quadrat.test(points_ppp, nx = nx, ny = ny, method = "MonteCarlo", conditional = TRUE)
  
  # Store results in a tibble and return it
  tibble(img_name = name, n_obj = nrow(points), p_value = qt$p.value)
}, mc.cores = n_cores)

# Transform list to one tibble
df_qt <- do.call(bind_rows, qt_all) %>% 
  # distribution is random if p_value > thres
  mutate(random = ifelse(p_value < thres, FALSE, TRUE))
summary(df_qt)
```

Positions of planktonic organisms are indeed random in most cases, and the few cases of non-randomness are caused by the p-value threshold that we used: `r percent(1 - (sum(df_qt$random) / nrow(df_qt)), accuracy = 0.01)` of non-randomness for a randomness threshold set at `r percent(thres)` .

Let’s plot the distribution of p-values and check that there is no relationship between p-value and the number of objects within the image.

```{r plot_p_val}
ggplot(df_qt) + geom_histogram(aes(x = p_value), bins = 100)
ggplot(df_qt) + geom_density_2d(aes(x = n_obj, y = p_value))
```

All good!

::: {.callout-note icon="false"}
## Conclusion

**When considering all planktonic organisms regardless of their taxa, they are randomly distributed at the local scale.**
:::
