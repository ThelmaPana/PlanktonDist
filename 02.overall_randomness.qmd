---
title: "Test for overall randomness of plankton distribution"
author: "Thelma Panaïotis"
format: 
  html:
    toc: true
    embed-resources: true
editor: visual
lightbox: true
execute:
  warning: false
  cache: true
  freeze: false
---

```{r set_up}
#| echo: false
source("utils.R")
```

```{r read}

## All data
images <- read_parquet(here("data/00.images_clean.parquet"))
plankton <- read_parquet(here("data/00.plankton_clean.parquet"))

## Subsample
images <- images %>% slice_sample(n = 1000)
plankton <- plankton %>% filter(img_name %in% images$img_name)

# list img names
img_names <- sort(unique(images$img_name))

## Null hypothesis data
load(here("data/01.null_data.Rdata"))
```

Define window size for point pattern analysis.

```{r vol_size}
# image volume in pixels
vol <- c()
vol$x <- 10240
vol$y <- 2048
vol$z <- 9572
```

## Distances between all organisms

To investigate overall randomness, let’s compute distances between all pairs of organisms within an image.

```{r all_dist}
# Loop over images and compute distances between all points within each image
dist_all <- mclapply(img_names, function(name) {
  # Get points within image
  points <- plankton %>% 
    filter(img_name == name) %>% 
    select(centroid_0, centroid_1) %>% 
    as.matrix()
  # Compute distances between points
  melt(as.matrix(dist(points)), varnames = c("p1", "p2")) %>% 
    as_tibble() %>% 
    filter(p1 != p2) %>% 
    rename(dist = value) %>% 
    mutate(img_name = name)
}, mc.cores = n_cores)

# Combine results in a dataframe
dist_all <- do.call(bind_rows, dist_all)

# Plot all
ggplot(dist_all) + 
  geom_density(aes(x = dist, colour = img_name), linewidth = 0.1, show.legend = F) +
  geom_density(aes(x = dist))

ggplot(dist_all) + 
  geom_density(aes(x = dist))
```

## Compare with null data using Kuiper test

Plot ECDF for null distances and all data. Subsample to 10000 points for computations.

```{r plot_ecdf}
bind_rows(
  dist_all %>% select(dist) %>% mutate(data = "all"),
  dist_all_rand %>% select(dist) %>% mutate(data = "null")
) %>% 
  slice_sample(n = 10000) %>% 
  ggplot(aes(dist, colour = data)) +
  stat_ecdf(geom = "step")
```

This looks very similar…

Perform Kuiper test on a subsample

```{r compare}
s1 <-  sample(dist_all$dist, size = 10000)
s2 <-  sample(dist_all_rand$dist, size = 10000)
out <-  kuiper_test(s1, s2)
out
summary(out)
plot(out)


```
