---
title: "Have a look at the agent-based model parameters"
author: "Thelma Panaïotis"
format: 
  html:
    toc: true
    embed-resources: true
editor: visual
lightbox: true
execute:
  warning: false
  cache: true
  freeze: false
---

```{r set_up}
#| echo: false
#| cache: false
source("utils.R")
source("utils_ab_model.R")
```

## Model parameters

Let’s familiarise ourselves with model parameters:

-   `h`: the bandwidth for computing density

-   `d_length`: the displacement length of organisms (in px)

-   `mv_prop`: the proportion of motile organisms (this one is straightforward)

Let’s take just one image as an example and see the effect of both `h` and `d_length`.

```{r gen_image}
#| fig-column: body-outset
#| out-width: 100%

set.seed(seed)
# Generate an image with organisms in 3D and plot it in 2D
df <- tibble(
    x = round(runif(n = 15, min = 1, max = vol$x)),
    y = round(runif(n = 15, min = 1, max = vol$y)),
    z = round(runif(n = 15, min = 1, max = vol$z))
  ) %>% # Add information for img name
    mutate(
      img_name = "img_001",
      id = paste0(str_pad(row_number(), 3, pad = "0"))
    )

ggplot(df) +
  geom_point(aes(x, y, colour = z)) +
  scale_colour_viridis_c() +
  coord_fixed()
```

### Density bandwidth

Let’s compute density with various bandwidth values and plot results.

```{r dens_bandwidth}
#| fig-column: body-outset
#| out-width: 100%

# List of bandwidth values to try
h_values <- c(10000, 50000, 100000, 500000)

# Empty list to store plots
plots <- list()

# Compute density for each bandwidth
lapply(1:length(h_values), function(i){
  
  # Get bandwidth value
  h <- h_values[i]
  
  # Compute density
  dens_3d <- calculate_density_3d(df, h = h, vol = vol)
  
  # Extract results
  dens_to_plot <- dens_3d$eval.points %>% 
    as_tibble() %>% 
    mutate(dens = dens_3d$estimate) %>% 
    group_by(x, y) %>% 
    summarise(dens = mean(dens), .groups = "drop") %>% 
    mutate(h = h)
  
  # Plot results and store plot
  plots[[i]] <- ggplot(dens_to_plot) +
    geom_raster(aes(x, y, fill = dens)) +
    geom_point(data = df, aes(x, y), size = 0.5) +
    scale_fill_distiller(palette = "Blues", direction = 1) +
    facet_wrap(~h, ncol = 1, labeller = labeller(.rows = label_both)) +
    coord_fixed()
})
```

Sane values are between `100000` and `400000`.

### Displacement length

```{r d_length}
#| fig-column: body-outset
#| out-width: 100%

# List of displacement values to try (in px)
d_length_values <- c(50, 100, 300, 500)
(d_length_values * 51)/10000 # to see equivalent in cm

# Generate random gradients in x, y and z directions for each point
gradient_values <- tibble(
    dx = round(runif(n = 15, min = 0, max = 1)),
    dy = round(runif(n = 15, min = 0, max = 1)),
    dz = round(runif(n = 15, min = 0, max = 1))
  )

new_pts <- lapply(d_length_values, function(d_length) {
  # Move points
  new_df <- move_points(df, gradient_values = gradient_values, d_length = d_length)
  
  # Store d_length
  new_df <- new_df %>% mutate(d_length = d_length)
}) %>% 
  bind_rows()

# Store updated points with original points
all_pts <- crossing( # generate all combinations between d_length_values and original points
  df,
  d_length = d_length_values
) %>% 
  mutate(when = "before") %>% # flag as before 
  bind_rows( # bind with updated points
    new_pts %>% mutate(when = "after") # flagged as after
  ) %>% 
  mutate(when = factor(when, levels = c("before", "after")))

ggplot(all_pts) +
  geom_point(aes(x, y, colour = when), size = 0.5) +
  scale_colour_manual(values = c("#66c2a5", "#fc8d62")) +
  facet_wrap(~d_length, ncol = 1, labeller = labeller(.rows = label_both)) +
  coord_fixed()
```

Let’s stay between `100` and `400` px, i.e. between 0.5 and 2 cm.

### Proportion of motile organisms

This can be inferred from the dataset composition and the swimming ability of each taxonomic group.

```{r motility}
# Load motility + count for each taxon
load("data/00.motility_counts.Rdata")
motility_counts %>% 
  group_by(motility) %>% 
  summarise(n = sum(n)) %>% 
  mutate(prop = n / sum(n))
```

Overall, 96% of organisms in the dataset are motile. The proportion with buoyancy control only is negligible.
