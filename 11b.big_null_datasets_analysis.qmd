---
title: "Analyze null Kuiper statistics for big datasets."
author: "Thelma Panaïotis"
format: 
  html:
    toc: true
    embed-resources: true
editor: visual
lightbox: true
execute:
  warning: false
  cache: true
  freeze: false
---

```{r set_up}
#| cache: false
source("utils.R")
```

## Read saved distances

List saved distances and ream them

```{r load}
## Null distances
load("data/02a.f_val_dist.Rdata")
load("data/02b.rq_coef.Rdata")
load("data/08.big_f_val_dist.Rdata")

## All plankton
load("data/03.all_distances.Rdata")

## Apply log transformation for plotting
f_val_dist <- f_val_dist %>% 
  mutate(
    log_n_dist = log10(n_dist),
    log_test_stat = log10(test_stat)
  )

big_f_val_dist <- big_f_val_dist %>% 
  mutate(
    log_n_dist = log10(n_dist),
    log_test_stat = log10(test_stat)
  )

df_all <- df_all %>% 
  mutate(
    log_n_dist = log10(n_dist),
    log_test_stat = log10(test_stat)
  )
```

## Plot Kuiper statistics VS number of distances

```{r f_vs_n_dist}
## Generate data to plot a ribbon between the regression lines
# limits for n_dist
lim_dist <- c(50, 2e9)
# Generate ribbon
rib_data <- tibble(n_dist = lim_dist) %>% 
  mutate(
    # apply log-transformation
    log_n_dist = log10(n_dist),
    # compute estimated kuiper-stat from slope and intercept
    ymin = rq_coef %>% filter(tau == 0.05) %>% pull(slope) * log_n_dist + rq_coef %>% filter(tau == 0.05) %>% pull(intercept),
    ymax = rq_coef %>% filter(tau == 0.95) %>% pull(slope) * log_n_dist + rq_coef %>% filter(tau == 0.95) %>% pull(intercept)
  ) %>% 
  # reformat and reorder to plot a polygon
  pivot_longer(ymin:ymax, values_to = "y") %>% 
  mutate(order = c(1, 2, 4, 3)) %>% 
  arrange(order)

## Plot results
ggplot() +
  geom_boxplot(data = f_val_dist, aes(x = log_n_dist, y = log_test_stat, group = log_n_dist), colour = "gray") +
  geom_polygon(data = rib_data, aes(x = log_n_dist, y = y), alpha = 0.1) +
  geom_point(data = big_f_val_dist, aes(x = log_n_dist, y = log_test_stat), colour = "black") +
  geom_point(data = df_all, aes(x = log_n_dist, y = log_test_stat), colour = "red") +
  scale_x_continuous(labels = label_math(expr = 10^.x, format = force), expand = c(0, 0)) +
  scale_y_continuous(labels = label_math(expr = 10^.x, format = force)) +
  labs(x = "N distances", y = "Kuiper statistic")
```

-   black points:  3 pairs of big null datasets (on top of each other).

-   red point: all plankton distances.

::: {.callout-tip icon="false"}
## Conclusion

Extrapolation of Kuiper stat on larger number of distances is OK.
:::
