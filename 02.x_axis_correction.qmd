---
title: "Correct distances in x axis"
subtitle: "Extract solitary Collodaria, prepare Ecotaxa import, get data from Ecotaxa."
author: "Thelma Pana√Øotis"
format: 
  html:
    toc: true
    embed-resources: true
editor: visual
lightbox: true
execute:
  warning: false
  cache: true
  freeze: false
---

```{r r_set_up}
#| echo: false
#| cache: false
source("utils.R")
```

```{python py_set_up}
#| echo: false
#| cache: false

import pandas as pd
```

## Extract solitary collodaria and prepare Ecotaxa import

### Get objects of interest

```{r read}
#| cache.lazy: false

## All data, because not so many solitary collodaria
images <- read_parquet("data/00.images_clean.parquet")
plankton <- read_parquet("data/00.plankton_clean.parquet")

# Get solitary Collodaria
plankton <- plankton %>% filter(taxon == "Collodaria_solitaryblack")

# List img names
images <- images %>% filter(img_name %in% plankton$img_name)
img_names <- sort(unique(images$img_name))

```

### Prepare table for Ecotaxa 

First, we need to prepare some new columns.

```{r new_cols}
plankton <- plankton %>% 
  mutate(
    # Date and time as YYYYMMDD and HHMMSS
    date = datetime %>% as_date() %>% as.character() %>% str_replace_all("-", ""),
    time = datetime %>% as.hms() %>% as.character() %>% str_replace_all(":", ""),
    depth_max = depth, # for depth_max
    img_file_name = paste0(object_id, ".png")
  ) %>% 
  select(
    # select relevant columns and rename
    object_id,
    img_file_name,
    sample_id = transect,
    process_id = img_name,
    object_lon = lon,
    object_lat = lat,
    object_date = date,
    object_time = time,
    object_depth_min = depth,
    object_depth_max = depth_max,
    object_dist = dist,
    object_x = x,
    object_y = y,
    object_height = height,
    object_width = width
  )
```

Now move to python to add header row and save as tsv.

```{python first_row}
df_ecotaxa = r.plankton

# add first row, containing data format codes; [f] for floats, [t] for text
# initiate first_row as floats
first_row = ['[f]'] * (df_ecotaxa.shape[1])

# list of possible columns with data format as text [t]
as_text = [
    'img_file_name',
    'object_id',
    'sample_id',
    'process_id'
]

# for columns in particles_props and with text format, change first row to [t]
col_ind_text = [df_ecotaxa.columns.get_loc(col) for col in list(set(df_ecotaxa.columns) & set(as_text))]
for i in col_ind_text:
    first_row[i] = '[t]'
    
# first_row as Dataframe row with appropriate headers
first_row = pd.DataFrame(first_row).T
first_row.columns = df_ecotaxa.columns

# concat first_row and dataframe
df_ecotaxa = pd.concat([first_row, df_ecotaxa], ignore_index = True)

## Save as tsv file

df_ecotaxa.to_csv('data/ecotaxa_solitary_collodaria.tsv', index = False, sep = '\t', header = True)
```

Now that the table is ready, we have to prepare images.

### Prepare images

```{python}

```
