---
title: "Analyze intrataxonomic distances."
author: "Thelma Panaïotis"
format: 
  html:
    toc: true
    embed-resources: true
editor: visual
lightbox: true
execute:
  warning: false
  cache: true
  freeze: false
---

```{r set_up}
#| cache: false
source("utils.R")
```

## Load data

```{r load_data}
load("data/05b.intra_distances_ks.Rdata")
load("data/04b.null_ks.Rdata")
```

## Process data

Need to apply log transformation to number of distances and Kuiper statistic.

Let’s also identify taxonomic groups for which we have non random distances in order to plot them in colour.

```{r process}
# Remove colonial Collodaria (segmentation artifact)
df_intra <- df_intra %>% filter(taxon != "Collodaria_colonial")
df_intra_dist <- df_intra_dist %>% filter(taxon != "Collodaria_colonial")

# Remove Rhizaria (poorly sorted)
df_intra <- df_intra %>% filter(taxon != "Rhizaria")
df_intra_dist <- df_intra_dist %>% filter(taxon != "Rhizaria")

# Log transform n dist and kuiper stat
df_intra <- df_intra %>% 
  mutate(
    log_n_dist = log10(n_dist),
    log_kuiper_stat = log10(kuiper_stat)
  )

# Identify taxa above the threshold and that have enough distances
# First, get slope and intercept of the 0.95 qt regression
intercept <- null_ks_rq_coef %>% filter(tau == 0.95) %>% pull(intercept)
slope <- null_ks_rq_coef %>% filter(tau == 0.95) %>% pull(slope)
df_intra <- df_intra %>% 
  mutate(
    above = log_kuiper_stat > slope * log_n_dist + intercept, # above the 0.95 qt reg
    enough = n_dist > n_dist_min, # are there enough distances
    sig = above & enough # significant if above and enough
    )

# Assign unique colour and shape to each taxon
df_intra <- df_intra %>% 
   mutate(
    colour = as.character(paletteer_d(`"khroma::discreterainbow"`, n = nrow(df_intra))),
    shape = rep(21:25, 6)[1:nrow(df_intra)]
  )
```

## Results

### Kuiper statistic VS number of distances

All taxonomic groups.

```{r ks_n_dist}
#| fig-column: body-outset
#| out-width: 100%
ggplot() +
  geom_boxplot(data = null_ks_n_dist, aes(x = log_n_dist, y = log_kuiper_stat, group = log_n_dist), colour = "gray", outlier.shape = NA) +
  geom_polygon(data = null_ks_rib, aes(x = log_n_dist, y = y), alpha = 0.1) +
  geom_point(data = df_intra, aes(x = log_n_dist, y = log_kuiper_stat, colour = taxon, fill = taxon, shape = taxon)) +
  labs(x = "N distances", y = "Kuiper statistic", colour = "Taxon", fill = "Taxon", shape = "Taxon") +
  scale_fill_manual(values = df_intra$colour) +
  scale_colour_manual(values = df_intra$colour) +
  scale_shape_manual(values = df_intra$shape) +
  scale_x_continuous(labels = label_math(expr = 10^.x, format = force), breaks = seq(2, 8, by = 2)) +
  scale_y_continuous(labels = label_math(expr = 10^.x, format = force)) +
  theme_classic()
```

Only those differing from random.

```{r ks_n_dist_sig}
#| fig-column: body-outset
#| out-width: 100%
df_intra_sig <- df_intra %>% filter(sig)
ggplot() +
  geom_boxplot(data = null_ks_n_dist, aes(x = log_n_dist, y = log_kuiper_stat, group = log_n_dist), colour = "gray", outlier.shape = NA) +
  geom_polygon(data = null_ks_rib, aes(x = log_n_dist, y = y), alpha = 0.1) +
  geom_point(data = df_intra %>% filter(!sig), aes(x = log_n_dist, y = log_kuiper_stat), colour = "grey") +
  geom_point(data = df_intra %>% filter(sig), aes(x = log_n_dist, y = log_kuiper_stat, colour = taxon, fill = taxon, shape = taxon)) +
  labs(x = "N distances", y = "Kuiper statistic", colour = "Taxon", fill = "Taxon", shape = "Taxon") +
  scale_fill_manual(values = df_intra_sig$colour) +
  scale_colour_manual(values = df_intra_sig$colour) +
  scale_shape_manual(values = df_intra_sig$shape) +
  scale_x_continuous(labels = label_math(expr = 10^.x, format = force), breaks = seq(2, 8, by = 2)) +
  scale_y_continuous(labels = label_math(expr = 10^.x, format = force)) +
  theme_classic()
```

### Distribution of distances

Start by plotting distribution of distances

```{r plot_dist}
#| fig-column: body-outset
#| out-width: 100%
# Reformat the distance dataframe
df_intra_dist <- df_intra_dist %>% 
  pivot_longer(plank_qt:rand_qt, names_to = "type", values_to = "dist") %>% 
  mutate(
    type = ifelse(type == "plank_qt", "Plankton", "Null"), # nicer names
    type = factor(type, levels = c("Plankton", "Null")) # convert to factor
    ) %>% 
  # keep only significant groups
  filter(taxon %in% df_intra_sig$taxon)

ggplot(df_intra_dist) +
  geom_density(aes(x = dist, colour = type)) +
  scale_colour_manual(values = c("#00B2FF", "grey"), labels = c("Plankton", "Null")) +
  labs(x = "Distance (cm)", y = "Density", colour = "Type") +
  theme_classic() +
  theme(strip.background = element_rect(colour = "white")) +
  facet_wrap(~taxon, scales = "free", ncol = 3)
```

Let’s plot ECDF.

```{r plot_ecdf}
#| fig-column: body-outset
#| out-width: 100%
ggplot(df_intra_dist) +
  stat_ecdf(aes(x = dist, colour = type)) +
  scale_colour_manual(values = c("#00B2FF", "grey"), labels = c("Plankton", "Null")) +
  labs(x = "Distance (cm)", y = "ECDF", colour = "Type") +
  theme_classic() +
  theme(strip.background = element_rect(colour = "white")) +
  facet_wrap(~taxon, scales = "free", ncol = 3)
```

To automatically detect the sense of variation, we can compute the difference between plankton ECDF and null  ECDF.

First, we need to compute ECDFs.

```{r compute_ecdfs}
# X axis on which to compute ECDFs
x_axis_seq <- seq(0, dist_thr, length.out = 1000)

# Reshape df to have one row per taxon
df_intra_dist_wide <- df_intra_dist %>% 
  pivot_wider(names_from = type, values_from = dist, values_fn = list)

# Loop over taxa
ecdfs_intra <- lapply(1:nrow(df_intra_dist_wide), function(i) {
  # Get row
  r <- df_intra_dist_wide %>% slice(i)  
  
  # Compute ecdf
  # Needs a nested call: ecdf(x) returns a function, x being the values of interest
  # Call this function with argument x2 to get values along x2 (here, plankton distances so that we have a common x axis) 
  plank_ecdf <- ecdf(unlist(r$Plankton))(x_axis_seq)
  null_ecdf <- ecdf(unlist(r$Null))(x_axis_seq)
  
  # Return difference
  res <- tibble(
    x_axis_seq = x_axis_seq,
    plank_ecdf = plank_ecdf,
    null_ecdf = null_ecdf,
    diff = plank_ecdf - null_ecdf
    ) %>% 
    mutate(taxon = r$taxon) %>% # add taxon
    select(taxon, everything())
  return(res)
}) %>% 
  bind_rows()
```

Now let’s plot the difference between plankton ECDF and null ECDF.

```{r plot_ecdf_diff}
#| fig-column: body-outset
#| out-width: 100%
ggplot(ecdfs_intra) + 
  geom_hline(yintercept = 0, colour = "gray") +
  geom_path(aes(x = x_axis_seq, y = diff), colour = "#00B2FF") +
  labs(x = "Distance (cm)", y = "Plankton ECDF - Null ECDF") +
  theme_classic() +
  theme(strip.background = element_rect(colour = "white")) +
  facet_wrap(~taxon, scales = "free", ncol = 3)
```

For nearly all taxonomic groups, plankton ECDF is above null  ECDF, indicating more short distances, i.e. planktonic organisms are closer than expected. Let’s automate the computation and store it.

```{r ecdfs_intra_summary}
ecdfs_intra_summ <- ecdfs_intra %>% 
  group_by(taxon) %>% 
  summarise(mean_diff = mean(diff)) %>% 
  mutate(dir = ifelse(mean_diff > 0, "closer", "further"))
```

Let’s now compute the interaction strength and confidence for each taxon.

### Interaction strength & confidence

Interaction strength corresponds to the Kuiper statistic while confidence is computed as the Z-score between Kuiper statistic and the distribution of null Kuiper statistics.

```{r z_scores}
#| fig-column: body-outset
#| out-width: 100%

# Compute Z-scores
df_intra_scores <- df_intra %>% 
  mutate(
    # compute estimated mean, 5th and 95th percentiles kuiper-stat from slope and intercept
    ymin = 
      null_ks_rq_coef %>% filter(tau == 0.05) %>% pull(slope) * log_n_dist + 
      null_ks_rq_coef %>% filter(tau == 0.05) %>% pull(intercept),
    ymean = 
      null_ks_rq_coef %>% filter(tau == "mean") %>% pull(slope) * log_n_dist + 
      null_ks_rq_coef %>% filter(tau == "mean") %>% pull(intercept),
    ymax = 
      null_ks_rq_coef %>% filter(tau == 0.95) %>% pull(slope) * log_n_dist + 
      null_ks_rq_coef %>% filter(tau == 0.95) %>% pull(intercept),
    # compute sigma
    sigma = (ymax - ymin) / (2 * 1.645),
    # compute z-score
    z_score = (log_kuiper_stat - ymean)/sigma
  ) %>% 
  # add intercation direction
  left_join(ecdfs_intra_summ, by = join_by(taxon))

# Plot Z-score
ggplot() +
  geom_boxplot(data = null_ks_n_dist, aes(x = log_n_dist, y = log_kuiper_stat, group = log_n_dist), colour = "gray", outlier.shape = NA) +
  geom_polygon(data = null_ks_rib, aes(x = log_n_dist, y = y), alpha = 0.1) +
  geom_point(data = df_intra_scores %>% filter(sig), aes(x = log_n_dist, y = log_kuiper_stat, colour = z_score)) +
  labs(x = "N distances", y = "Kuiper statistic", colour = "Z-score") +
  scale_colour_viridis_c() +
  scale_x_continuous(labels = label_math(expr = 10^.x, format = force), breaks = seq(2, 8, by = 2)) +
  scale_y_continuous(labels = label_math(expr = 10^.x, format = force)) +
  theme_classic()
```

Plot Z-score VS Kuiper statistic for significant taxa.

```{r plot_z}
#| fig-column: body-outset
#| out-width: 100%

df_intra_scores %>% 
  filter(sig) %>% 
  ggplot() + 
  geom_point(aes(x = kuiper_stat, y = z_score, colour = taxon, fill = taxon, shape = taxon)) +
  scale_colour_manual(values = df_intra_sig$colour) +
  scale_fill_manual(values = df_intra_sig$colour) +
  scale_shape_manual(values = df_intra_sig$shape) +
  labs(x = "Kuiper statistic", y = "Z-score", colour = "Taxon", fill = "Taxon", shape = "Taxon") +
  expand_limits(x = 0, y = 0) +
  theme_classic()
```

## Save

Save Z-score and Kuiper stat.

```{r save}
save(df_intra_scores, file = "data/06b.df_intra_scores.Rdata")
```

Check and plot diff.

```{r plot_median_diff}
#| fig-column: body-outset
#| out-width: 100%

df_intra_dist %>% 
  group_by(taxon, type) %>% 
  summarise(med_dist = median(dist), .groups = "drop") %>% 
  pivot_wider(names_from = type, values_from = med_dist) %>% 
  mutate(med_diff = Null - Plankton) %>% 
  arrange(med_diff) %>% 
  mutate(taxon = fct_inorder(taxon)) %>% 
  ggplot() +
  geom_point(aes(y = taxon, x = med_diff)) +
  geom_vline(xintercept = 0, colour = "grey", linewidth = 2) +
  labs(x = "Null dist median - Plankton dist median (cm)", y = "Taxon") +
  theme_classic()
```

```{r quantiles_diff}
#| fig-column: body-outset
#| out-width: 100%

# Plot differences in quantiles
df_intra_dist %>% 
  mutate(type = str_to_lower(type)) %>% 
  group_by(taxon, type) %>% # separately for plankton and null
  reframe(dist = quantile(dist, probs = seq(0, 1, by = 0.01))) %>% # compute percentiles
  pivot_wider(names_from = type, values_from = dist, values_fn = list) %>% # plankton and null quantiles in two columns
  unnest(c(plankton, null)) %>% 
  mutate(
    diff = null - plankton, # compute difference between null and plankton quantiles
    x_axis = rep(seq(0, 1, by = 0.01) * dist_thr, length.out = n()) # add X axis sequence, i.e. percentiles times the max distance
    ) %>% 
  ggplot() +
  geom_hline(yintercept = 0, colour = "grey", linewidth = 1) +
  geom_path(aes(x = x_axis, y = diff, colour = taxon), alpha = 0.8) +
  labs(x = "Distance (cm)", y = "Null quantiles - plankton quantiles (cm)", colour = "Taxon") +
  theme_classic()
```
