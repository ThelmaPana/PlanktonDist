---
title: "Test for overall randomness of plankton distribution from small distances"
author: "Thelma Panaïotis"
format: 
  html:
    toc: true
    embed-resources: true
editor: visual
lightbox: true
execute:
  warning: false
  cache: true
  freeze: false
---

```{r set_up}
#| echo: false
#| cache: false
source("utils.R")
```

## Load data

```{r read}
#| cache.lazy: false
load("data/03.all_distances.Rdata")
load("data/02a.f_val_dist_small.Rdata")
load("data/02b.rq_coef_small.Rdata")
```

## Process data

### Null distances

```{r prep_null}
# Apply log transformation for plotting
f_val_dist <- f_val_dist %>% 
  mutate(
    log_n_dist = log10(n_dist),
    log_test_stat = log10(test_stat)
  )

## Generate data to plot a ribbon between the regression lines
# limits for n_dist
lim_dist <- c(50, 2e9)
# Generate ribbon
rib_data <- tibble(n_dist = lim_dist) %>% 
  mutate(
    # apply log-transformation
    log_n_dist = log10(n_dist),
    # compute estimated kuiper-stat from slope and intercept
    ymin = rq_coef %>% filter(tau == 0.05) %>% pull(slope) * log_n_dist + rq_coef %>% filter(tau == 0.05) %>% pull(intercept),
    ymax = rq_coef %>% filter(tau == 0.95) %>% pull(slope) * log_n_dist + rq_coef %>% filter(tau == 0.95) %>% pull(intercept)
  ) %>% 
  # reformat and reorder to plot a polygon
  pivot_longer(ymin:ymax, values_to = "y") %>% 
  mutate(order = c(1, 2, 4, 3)) %>% 
  arrange(order)
```

### Plankton distances

We need to filter distances to keep only the small distances, and perform the Kuiper test using these filtered distances.

```{r filter_dist}
# Get distances
df_all_dist <- df_all %>% 
  dplyr::select(dist, dist_rand) %>% 
  unnest(c(dist, dist_rand)) %>% 
  pivot_longer(dist:dist_rand) %>% 
  mutate(value = value * 51 / 10000) # from pixel to cm

# Get distance threshold
dist_thr <- plankton_esd %>% filter(taxon == "all") %>% pull(dist_thr)

# Extract distances smaller than a given threshold
dist_small <- df_all_dist %>% filter(name == "dist") %>% filter(value < dist_thr) %>% pull(value) # plankton
dist_rand_small <- df_all_dist %>% filter(name == "dist_rand") %>% filter(value < dist_thr) %>% pull(value) # null

# Store this in a tibble
df_all_dist_small <- bind_rows(
    tibble(type = "data", dist = dist_small),
    tibble(type = "rand", dist = dist_rand_small)
  )

length(dist_small) # 4926 distances for plankton
length(dist_rand_small) # 4901 distances for null
# Let’s take the average for the plot, compute the proportion of small distances based on quantiles
# With this proportion and the total number of images, we can compute the total number of small distances
prop_dist_small <- ((length(dist_small) + length(dist_rand_small)) / 2) / 10000

# Perform Kuiper test using only small distances
kt <- kuiper_test(dist_small, dist_rand_small)

# Compute number of small distances from total number of distances and proportion of small distances
df_all <- df_all %>% 
  mutate(
    n_dist_small = n_dist * prop_dist_small,
    log_n_dist_small = log10(n_dist_small),
    test_stat_small = kt[1]
  )
```

## Results

Plot Kuiper statistic VS number of distances.

```{r kuiper_plot}
## Plot results
ggplot() +
  geom_boxplot(data = f_val_dist, aes(x = log_n_dist, y = log_test_stat, group = log_n_dist), colour = "gray") +
  geom_polygon(data = rib_data, aes(x = log_n_dist, y = y), alpha = 0.1) +
  geom_point(data = df_all, aes(x = log_n_dist_small, y = log10(test_stat_small)), colour = "red") +
  scale_x_continuous(labels = label_math(expr = 10^.x, format = force), breaks = seq(2, 8, by = 2)) +
  scale_y_continuous(labels = label_math(expr = 10^.x, format = force)) +
  labs(x = "N distances", y = "Kuiper statistic")

```

Plot distribution of distances.

```{r dist}
# Plot distribution
df_all_dist_small %>% 
  ggplot() + 
  geom_density(aes(x = dist, colour = type)) +
  scale_colour_manual(
    values = c("rand" = "grey60", "data" = "black"),
    labels = c("plankton", "null")
    ) +
  labs(x = "Distance (cm)", y = "Density", colour = "Type")
```

Plot ECDF.

```{r ecdf}
# and ECDF
df_all_dist_small %>% 
  ggplot() + 
  stat_ecdf(aes(x = dist, colour = type)) +
  scale_colour_manual(
    values = c("rand" = "grey60", "data" = "black"),
    labels = c("plankton", "null")
    ) +
  labs(x = "Distance (cm)", y = "Density", colour = "Type")
```

::: {.callout-note icon="false"}
## Conclusion

**Distances between planktonic organisms at the local scale differ from the distances that could be expected if plankton was randomly distributed.**
:::

Save processed data.

```{r save}
#save(f_val_dist, rib_data, df_all, df_all_dist_small, file = "data/03c.all_distances_processed.Rdata")
```
